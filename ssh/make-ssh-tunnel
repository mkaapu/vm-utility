#!/usr/bin/env bash
#
# Makes a persistent SSH tunnel between servers with systemd.
#
# Uses the ssh-tunnel-persistent.service template file to write
# systemd unit file. The tempalate file must be on the same directory
# with this tool.
#
# Created user unit is placed in ~/.config/systemd/user/.
# User service is started and enabled to be autostarted on reboot.
# It can run without any open sessions (loginctl enable-linger $USER).
#
# Check the usage() function below for more usage options

#######################################
# Shell options
#######################################
set -e

#######################################
# DEFAULT VALUES
#######################################

# Path of the executing script
DIR=$(dirname "$0")

# name for tunnel/server/VM/etc. to identify the created systemd service
NAME=external

# Local IP address
IP=10.10.10.10

# IP address of the external server/VM/etc. to connect with the tunnel
TO_IP=10.10.20.10

# User on the external server to connect with the tunnel
LOGIN=ubuntu

# Local port which is forwarded to the external server/VM/etc.
PORT=2222

# Port on the external server to connect through the tunnel
TO_PORT=22

#######################################
# USAGE
#######################################

usage() {
  echo "Usage: $0 [options] <name>"
  echo
  echo "Creates a persistent SSH tunnel between servers with systemd"
  echo
  echo "Writes a systemd user unit file which enables persistent SSH"
  echo "tunnel from a local port to a port on an external server."
  echo "Starts the service and enables the service to be autostarted."
  echo "Enables the user process for the service to run without any"
  echo "open sessions on the local host."
  echo
  echo "Options:"
  echo "  -h, --help            Displays help on commandline options"
  echo "  -i, --ip <ip>	        Local IP address"
  echo "			With value 0.0.0.0 it would be binding"
  echo "			on all interfaces on local server"
  echo "  -s, --server <ip>	IP address of the external server"
  echo "  -u, --user <user>	User in the external server"
  echo "  -p, --port <port>	Local port which is forwarded to the"
  echo "			external server to create the tunnel"
  echo "			Default: 2222"
  echo "  -t, --to-port <port>  Port on the external server"
  echo "			Default: 22"
  echo
  echo "Arguments:"
  echo "  name			Name and identifier for the tunnel."
  echo "			It will be a part of the name for the"
  echo "			created service:"
  echo "                        ssh-tunnel-from-<port>-to-<name>.service"
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################
if ! OPTS="$(getopt \
  --longoptions help,ip:,server:,user:,port:,to-port: \
  --options hi:s:u:p:t: \
  --name "$(basename "$0")" \
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h) usage; exit ;;
    --ip|-i) IP="$2"; shift 2 ;;
    --server|-s) TO_IP="$2"; shift 2 ;;
    --port|-p) PORT="$2"; shift 2 ;;
    --to-port|-t) TO_PORT="$2"; shift 2 ;;
    --user|-u) LOGIN="$2"; shift 2 ;;
    --) shift; break ;;
    *) echo "DEBUG: No implementation for the option $1" ; exit 1 ;;
  esac
done
ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  NAME="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  echo "Too many arguments supplied."
  usage
  exit 1
fi

#######################################
# Main Execution
#######################################

# Name of the service to be created to establish the persistent tunnel
SERVICE_NAME=ssh-tunnel-from-$PORT-to-$NAME.service
# Path to the user unit
UNIT_FILE=~/.config/systemd/user/$SERVICE_NAME

echo "Writing the systemd user unit to $UNIT_FILE .."
mkdir -p ~/.config/systemd/user/
cat $DIR/ssh-tunnel-persistent.service \
  | sed "s/HOST/${IP}/g" \
  | sed "s/LOCAL/${PORT}/g" \
  | sed "s/SERVER/${TO_IP}/g" \
  | sed "s/PORT/${TO_PORT}/g" \
  | sed "s/USER/${LOGIN}/g" \
  | tee $UNIT_FILE > /dev/null

echo "Enabling the service to be autostarted .."
systemctl --user enable $SERVICE_NAME
echo "Starting the service .."
systemctl --user start $SERVICE_NAME
echo "Enabling user process to run without any open sessions .."
loginctl enable-linger $USER
systemctl --user status $SERVICE_NAME
