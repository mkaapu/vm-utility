#!/usr/bin/env bash
#
# Script to extend the usability, scripting and automation possiblities
# of the Multipass tool.
#
# Enables SSH connection to a Multipass instance from host machine.
# Can be used to set a static IP address to multipass instance.
# Provides a minimal interface suitable for use by other shell scripts
# and automation tools.
#
# Multipass installation is needed:
# snap install multipass
#
# Superuser privileges are needed to add a route from host to VM with
# a static IP.
#
# Check the usage() function below for more usage options

#######################################
# Shell options
#######################################
set -e

#######################################
# Includes
#######################################
. vmu-calls
. net-calls
. mp-calls

#######################################
# DEFAULT VALUES
#######################################

# Name of virtual machine instance
NAME='primary'
# Path to a private SSH key
KEY=
# The type of the key
TYPE=
# true if new SSH key will be generated
KEYGEN=false
# Static IP address (for example: 10.101.123.111)
IP=
# Quiet mode with no usage or extra notes with errors etc.
QUIET=false
# Timeout for connection attemps in seconds
TIMEOUT=30
# List of error messages to display when exiting with error
ERRORS=()

#######################################
# FUNCTIONS
#######################################

#######################################
# Usage
# Arguments:
#   None
# Outputs:
#   Writes usage to stdout
#######################################
usage() {
  echo "Usage: $0 [options] <name>"
  echo
  echo "Tool to provides extended accessibility to a multipass VM instance"
  echo "from host machine through SSH."
  echo
  echo "An example of setting a static IP address to a multipass instance:"
  echo "$ multipass launch --name my-vm"
  echo "$ $0 --ip 10.10.10.10 my-vm"
  echo "$ ssh ubuntu@10.10.10.10"
  echo
  echo "Options:"
  echo "  -h, --help		  	Displays help on commandline options."
  echo "  -f, --filename <filename>	Specifies the path to the private"
  echo "				SSH key file. Default:"
  echo "				~/.ssh/id_ed25519."
  echo "  -t, --type <type>            	Specifies the type of SSH key to create."
  echo "				The possible values are:"
  echo "				ecdsa | ed25519 | rsa"
  echo "				Default: ed25519."
  echo "  -k, --keygen			Generates a new SSH key pair based on"
  echo "				given key file (-f) and type (-t)"
  echo "				unless such a key already exists."
  echo "  -i, -- ip <ip>	       	Sets a static IP address for the"
  echo "                              	instance. Note that there will be no"
  echo "				IP address conflict detection with"
  echo "				any existing addresses."
  echo "  -T <timeout>			Sets the timeout seconds for attempts to"
  echo "				scan a public key from the VM instance"
  echo "				to enable SSH connection from the host."
  echo "				The default is 30."
  echo "  -q, --quiet			No usage is displayed with errors."
  echo
  echo "Arguments:"
  echo "  name				Name of the multipass instance."
}

#######################################
# Exit with error status 1 and display error messages.
# Globals:
#   ERRORS as an array of error messages
#   QUIET  if true, no usage displayed with errors
# Arguments:
#   None
# Outputs:
#   Possible error messages written to stderr
#######################################
exit_error() {
  for error in "${ERRORS[@]}"; do
    >&2 echo $error
  done
  if ! $QUIET; then
    usage
  fi
  exit 1
}

#######################################
# Validate the type of SSH key.
# Arguments:
#   SSH key type
# Outputs:
#   0 if valid type, non-zero on error.
#######################################
valid_type() {
  if [ $1 == 'ecdsa' \
    -o $1 == 'ed25519' \
    -o $1 == 'rsa' ]
  then
    return 0
  fi
  return 1
}

#######################################
# Specify SHH key file path and key type.
# Globals:
#   KEY  specified if empty (without -f option)
#   TYPE specified if empty (without -t option)
# Arguments:
#   Private SSH key file path
#   SSH key type
#######################################
specify_key()  {
  local key=$1
  local type=$2
  # set default values without -f and -t options
  if [ -z $key ] && [ -z $type ]; then
    KEY=~/.ssh/id_ed25519
    TYPE=ed25519
  # type is given with -t option
  elif [ $type ] && [ -z $key ]; then
    KEY=~/.ssh/id_$type
  # key file is given with -f option
  elif [ $key ] && [ -z $type ]; then
    # key file name can be id_<valid_type>
    local filename=$(basename $key)
    local name=${filename:3}
    if [ $name ] && valid_type $name; then
      TYPE=$name
    else
      TYPE=ed25519
    fi
  fi
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################
if ! OPTS="$(getopt \
  --longoptions help,filename:,type:,keygen,ip:quiet \
  --options hf:t:ki:T:q \
  --name "$(basename "$0")" \
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h)
      usage
      exit
      ;;
    --filename|-f)
      KEY="$2"
      shift 2
      ;;
    --type|-t)
      TYPE="$2"
      if ! valid_type "$TYPE"; then
        ERRORS+=("'$TYPE' is not a valid SSH key type.")
      fi
      shift 2
      ;;
    --keygen|-k)
      KEYGEN=true
      shift
      ;;
    --ip|-i)
      IP="$2"
      if ! valid_ip "$IP"; then
        ERRORS+=("$IP is not a valid IP address.")
      fi
      shift 2
      ;;
    -T)
      TIMEOUT="$2"
      shift 2
      ;;
    --quiet|-q)
      QUIET=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "DEBUG: No implementation for the option $1"
      exit 1
      ;;
  esac
done

ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  NAME="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  ERRORS+=("Too many arguments supplied.")
fi

# Exit with possible argument errors
if [ ${#ERRORS[@]} -ne 0 ]; then
  exit_error
fi

#######################################
# Main Execution
#######################################

specify_key "$KEY" "$TYPE"
echo SSH key file: $KEY
echo Key type: $TYPE

# SSH key pair generation with --keygen option
if $KEYGEN; then
  if [ ! -f $KEY ]; then
    ssh-keygen -q -t $TYPE -f $KEY -N ''
    echo New SSH key was generated.
  else
    echo No new SSH keys were generated.
  fi
else
  echo No new SSH keys were generated.
fi

# If public key not found
if [ ! -f $KEY.pub ]; then
  ERRORS+=("Public key: $KEY.pub not found.")
  ERRORS+=("To generate a new SSH key pair use -k option.")
  exit_error
fi

# Copy the public SSH key to the multipass instance.
# Multipass displays an error message if the instance name is wrong.
if ! mp-copy-ssh $KEY.pub $NAME; then
  exit_error
fi

# Static IP is set for VM instance if --ip option is used
# Otherwise a dynamic IP given by Multipass is used.
if [ -z "$IP" ]; then
  IP=$(mp-info-ip $NAME)
  echo IP: $IP
else
  echo IP: $IP
  mp-static-ip $NAME $IP
  echo
  # Adds a new route to the VM on host (superuser privileges needed)
  mp-route -i $IP $NAME
fi

echo
echo Updating ~/.ssh/known_hosts ..
# Makes sure there will be no duplicate entries
# with the same IP address in the known_hosts.
if [ -f ~/.ssh/known_hosts ]; then
  ssh-keygen -R $IP 2> /dev/null
  # When IP address is re-configured for the VM, remove old entries
  if OLD_IP=$(get_config $NAME $VMU_IPS); then
    if [ $OLD_IP != $IP ]; then
      ssh-keygen -R $OLD_IP 2> /dev/null
    fi
  fi
fi
# Adds the public key to known_hosts file.
if ! ssh-keyscan -H -t $TYPE -T $TIMEOUT $IP >> ~/.ssh/known_hosts
then
  ERRORS+=("SSH2_MSG_KEX_ECDH_REPLY not received from the $NAME"\
  "in $TIMEOUT seconds.")
  ERRORS+=("~/.ssh/known_hosts could not be updated automatically.")
  ERRORS+=("Timeout seconds can be extended with the -T option.")
  exit_error
fi

# The IP address stored so the known hosts key can be removed
# when the VM is purged or a new IP is configured for the VM
set_config $NAME $IP $VMU_IPS

echo
echo "Open a shell prompt on the $NAME:"
echo "$ multipass shell $NAME"
echo "OR"
if [ "$(dirname $KEY)" == ~/.ssh ] && \
   [ "$(basename $KEY)" == id_"$TYPE" ]
then
  echo "$ ssh ubuntu@$IP"
else
  echo "$ ssh -i $KEY ubuntu@$IP"
fi
