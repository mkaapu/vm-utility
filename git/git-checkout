#!/usr/bin/env bash
#
# Checkout (clone, pull or checkout) a git repository
#
# Check usage() fuction below for more usage options

#######################################
# Shell options
#######################################
set -e

#######################################
# Includes
#######################################
. git-calls

#######################################
# DEFAULT VALUES
#######################################

# The Repository URL or path of the git repository to be cloned
CLONE_URL=

# The path to a git repository to be checked out
CLONE_DIR=

# The specific branch to be checked out in a repository
BRANCH=

# The name of the remote repository
REMOTE=origin

#######################################
# FUNCTIONS
#######################################

#######################################
# Usage
# Arguments:
#   None
# Outputs:
#   Writes usage to stdout
#######################################
usage() {
  echo "Usage: $0 [options] [directory]"
  echo
  echo "Checkout a git repository"
  echo
  echo "Clone a repository into a new directory"
  echo "$ $0 --url https://github.com/mkaapu/vm-utility.git"
  echo "OR"
  echo "$ $0 -u https://github.com/mkaapu/vm-utility.git prj/vm-utility"
  echo
  echo "Checkout and pull changes in an existing git repository:"
  echo "$ cd /projects/my-project"
  echo "$ $0"
  echo "OR"
  echo "$ $0 /projects/my-project"
  echo "OR"
  echo "$ $0 --branch stable /projects/my-project"
  echo
  echo "Options:"
  echo "  -h, --help                    Displays help on commandline options."
  echo "  -b, --branch <branch>         A new branch to create or an existing branch"
  echo "                                to track or checkout."
  echo "  -r, --remote <repository>     A remote repository to track."
  echo "                                Default: origin"
  echo "  -u, --url <url>               The URL or path of the git repository to clone."
  echo
  echo "Arguments:"
  echo "  directory     The path to a clone of a git repository"
}

#######################################
# Specify the path to a git repository (if not set).
# Globals:
#   CLONE_DIR set if empty
#   CLONE_URL used to determine repository name if CLONE_DIR is empty
#######################################
set_clone_dir() {
  if [ $CLONE_URL ] && [ -z $CLONE_DIR ]; then
    local git_repo=$(basename $CLONE_URL)
    CLONE_DIR=$PWD/${git_repo%.git}
  elif [ -z $CLONE_URL ] && [ -z $CLONE_DIR ]; then
    CLONE_DIR=$PWD
  fi
}

#######################################
# Specify the branch to be checked out (if not set).
# Globals:
#   BRANCH set if empty
#######################################
set_branch() {
  if [ -z $BRANCH ]; then
    BRANCH=$(git-default-branch)
  fi
}

#######################################
# Checks out a git repository.
#
# If a local clone is not found, the repository will be cloned.
# If branch is not given the default branch is fetched and integrated.
# If the specified remote branch is found from the remote repository,
# a local branch is fetched and integrated (git pull --ff-only).
# If the specified local branch exists without tracking remote branch,
# the branch will be checked out.
# If the specified branch does not exist, default branch is fetched
# and integrated and a new local branch is checked out from the HEAD
# of the default branch.
#
# Globals:
#   CLONE_DIR path to a clone directory
#   CLONE_URL as URL or path of the git repository to be cloned
#   BRANCH to be cloned, pulled or checked out
#   REMOTE repository to be tracked
#######################################
checkout() {
  if [ -d $CLONE_DIR/.git ]; then
    cd $CLONE_DIR
    set_branch
    if git-upstream-exists $BRANCH $REMOTE; then
      git checkout $BRANCH
      git pull --ff-only
    elif git-branch-exists $BRANCH; then
      git checkout $BRANCH
    else
      git checkout $(git-default-branch)
      git pull --ff-only
      git checkout -b $BRANCH
    fi
  else
    git clone $CLONE_URL $CLONE_DIR
    cd $CLONE_DIR
    set_branch
    if [ $BRANCH != $(git-default-branch) ]; then
      if git-upstream-exists $BRANCH $REMOTE || \
         git-branch-exists $BRANCH
      then
        git checkout $BRANCH
      else
        git checkout -b $BRANCH
      fi
    fi
  fi
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################

if ! OPTS="$(getopt \
  --longoptions help,branch:,remote:url: \
  --options hb:,r:u: \
  --name "$(basename "$0")" \
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h) usage; exit ;;
    --branch|-b) BRANCH="$2"; shift 2 ;;
    --remote|-r) REMOTE="$2"; shift 2 ;;
    --url|-u) CLONE_URL="$2"; shift 2 ;;
    --) shift; break ;;
    *) echo "DEBUG: No implementation for the option $1" ; exit 1 ;;
  esac
done
ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  CLONE_DIR="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  echo "Too many arguments supplied."
  usage
  exit 1
fi

#######################################
# Main Execution
#######################################

set_clone_dir
checkout
