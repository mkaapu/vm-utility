#!/usr/bin/env bash
#
# Script to run Docker in Docker (docker:dind) image as a container
# so that another container running Jenkins controller have docker CLI
# inside it. The run-jenkins script can be used to start the Jenkins
# container which is installed with Blue Ocean plugins and features.
#
# Docker installation is needed. Here is a script for that:
# <vm_utility>/installers/docker/setup-docker
#
# Referenc: https://www.jenkins.io/doc/book/installing/docker/
# To achieve what is instructed on Jenkins documentation, simply run
# the script with default options, or:
# run-dind -rm --detach
#
# Check the usage() function below for more usage options.

#######################################
# Shell options
#######################################
set -e

#######################################
# DEFAULT VALUES
#######################################

# The Docker container name
NAME=jenkins-docker

# Name for a bridge network created in Docker
NETWORK=jenkins

# Makes the container available with this hostname within the $NETWORK
NET_ALIAS=docker

# The root directory where Docker TLS certificates are managed
CERTDIR=/certs

# The Docker volume which maps the $CERTDIR/client directory
# inside the container
CERT_VOLUME=jenkins-docker-certs

# The Docker volume which maps the /var/jenkins_home directory
# inside the container
JENKINS_DATA=jenkins-data

# The Docker daemon port exposed on the host machine
DAEMON_PORT=2376

# Array of environmnet variables for Docker container
ENV_VARS=()

# Array of Docker volumes mapping directories inside the container
VOLUMES=()

# Array of container's port or a range of ports exposed to the host
PORTS=()

# Command to run the docker:dind with its options collected as array
RUN=( "docker run" )

#######################################
# FUNCTIONS
#######################################

#######################################
# Usage
# Arguments:
#   None
# Outputs:
#   Writes usage to stdout
#######################################
usage() {
  echo "Usage: $0 [options] [container]"
  echo
  echo "Donloads and run the docker:dind Docker image"
  echo "in order to execute Docker commands inside Jenkins nodes."
  echo
  echo "Makes the Docker in Docker container available with a hostname (--hostname option)"
  echo "within the created bridge network (--network option) in Docker."
  echo
  echo "Example of running the container in the background with the auto-cleanup option:"
  echo "$ $0 --rm --detach"
  echo
  echo "Options:"
  echo "  -h, --help                                    Displays help on commandline options."
  echo "  --rm                                          Automatically removes the container"
  echo "                                                when it is shut down."
  echo "  -d, --detach                                  Runs the container in the background."
  echo "  --network <network>                           Creates the bridge network in Docker with this name."
  echo "                                                Default: jenkins"
  echo "  --hostname <alias>                            Makes the container availabe with this hostname."
  echo "                                                within the bridge network (--network option)"
  echo "                                                Default: docker"
  echo "  --cert-volume <volume>                        The name of the volume which maps the /cert/client."
  echo "                                                directory"
  echo "                                                Default: jenkins-docker-certs"
  echo "  --home-volume <volume>                        The name of the volume which maps the Jenkins home"
  echo "                                                directory."
  echo "                                                Default: jenkins-data"
  echo "  --port <port>                                 Exposes this Docker dameon port on the host machine."
  echo "                                                Default: 2376"
  echo "  -e, --env <variable=value>                    Sets environmnet variable in the container."
  echo "  -v, --volume=[host-src]:container-dest        Mounts a volume."
  echo "  -p, --publish <hostPort:containerPort>        Publishes a container's port or a range of ports"
  echo "                                                to the host."
  echo "Arguments:"
  echo "  container                                     The Dokcer container name"
  echo "                                                Default: jenkins-docker"
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################

if ! OPTS="$(getopt \
  --longoptions help,rm,detach,network:,hostname:,cert-volume:,\
home-volume:,port:,env:,volume:,publish: \
  --options hde:v:p: \
  --name "$(basename "$0")" \
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h) usage; exit ;;
    # Automatically removes the Docker container when it is shut down.
    --rm) RUN+=( "--rm" ); shift ;;
    # Runs the Docker container in the background.
    --detach|-d) RUN+=( "--detach" ); shift ;;
    --network) NETWORK="$2"; shift 2 ;;
    --hostname) NET_ALIAS="$2"; shift 2 ;;
    --cert-volume) CERT_VOLUME="$2"; shift 2 ;;
    --home-volume) JENKINS_DATA="$2"; shift 2 ;;
    --port) DAEMON_PORT="$2"; shift 2 ;;
    --env|-e) ENV_VARS+=( "$2" ); shift 2 ;;
    --volume|-v) VOLUMES+=( "$2" ); shift 2 ;;
    --publish|-p) PORTS+=( "$2" ); shift 2 ;;
    --) shift; break ;;
    *) echo "DEBUG: No implementation for the option $1" ; exit 1 ;;
  esac
done
ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  NAME="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  echo "Too many arguments supplied."
  usage
  exit 1
fi

#######################################
# Main Execution
#######################################

echo
echo "Creating a bridge network named '$NETWORK' in Docker.."
docker network create $NETWORK

echo
echo "Downloading and running the docker:dind image in order to execute\
 Docker commands inside Jenkins nodes.."
RUN+=( "" )
# Running Docker in Docker currently requires privileged access
RUN+=( "--privileged" )
RUN+=( "--name $NAME" )
RUN+=( "--network $NETWORK" )
RUN+=( "--network-alias $NET_ALIAS" )
RUN+=( "--env DOCKER_TLS_CERTDIR=$CERTDIR" )
RUN+=( "--volume $CERT_VOLUME:$CERTDIR/client" )
RUN+=( "--volume $JENKINS_DATA:/var/jenkins_home" )
RUN+=( "--publish ${DAEMON_PORT}:2376" )
for var in "${ENV_VARS[@]}"; do
  RUN+=( "--env $var" )
done
for volume in "${VOLUMES[@]}"; do
  RUN+=( "--volume $volume" )
done
for publish in "${PORTS[@]}"; do
  RUN+=( "--publish $publish" )
done
RUN+=( "docker:dind" )
# The storage driver for the Docker volume
RUN+=( "--storage-driver overlay2" )
${RUN[@]}
