#!/usr/bin/env bash
#
# Check out (clone, pull or checkout) a git repository
#
# If a local clone is not found, the repository will be cloned.
# If branch is not given the default branch is fetched and integrated.
# If the specified remote branch is found from the remote repository,
# a local branch is fetched and integrated (git pull --ff-only).
# If the specified local branch exists without tracking remote branch,
# the branch will be checked out.
# If the specified branch does not exist, default branch is fetched
# and integrated and a new local branch is checked out from the HEAD
# of the default branch.
#
# Check usage() fuction below for more usage options

#######################################
# Shell options
#######################################
set -e

#######################################
# Includes
#######################################
. git-calls

#######################################
# DEFAULT VALUES
#######################################

# The Repository URL or path of the git repository to be cloned
CLONE_URL=

# The path to a git repository to be checked out
CLONE_DIR=

# The specific branch to be checked out in a repository
BRANCH=

# The name of the remote repository
REMOTE=origin

# User name for git configuration
NAME=

# Email address for git configuration
MAIL=

# Default editor for git configuration
EDIT=

# true if initial configuration for nano is generated (~/.nanorc)
USE_NANO=false

# true if access to git repositories is limited via SSH
USE_SSH=false

# Command line arguments for the dev-setup tool
ENV_SETUP_ARGS=()

#######################################
# FUNCTIONS
#######################################

#######################################
# Usage
# Arguments:
#   None
# Outputs:
#   Writes usage to stdout
#######################################
usage() {
  echo "Usage: $0 [options] [directory]"
  echo
  echo "Checkout a git repository"
  echo
  echo "Clone a repository into a new directory:"
  echo "$ $0 --url https://github.com/mkaapu/vm-utility.git"
  echo "OR"
  echo "$ $0 -u https://github.com/mkaapu/vm-utility.git prj/vm-utility"
  echo
  echo "Checkout and pull changes in an existing git repository:"
  echo "$ cd /projects/my-project"
  echo "$ $0"
  echo "OR"
  echo "$ $0 /projects/my-project"
  echo "OR"
  echo "$ $0 --branch stable /projects/my-project"
  echo
  echo "Options:"
  echo "  -h, --help                    Displays help on commandline options."
  echo "  -u, --url <url>               The URL or path of the git repository"
  echo "                                to clone."
  echo "  -b, --branch <branch>         A new branch to create or an existing"
  echo "                                one to track or checkout."
  echo "  -r, --remote <repository>     A remote repository to track."
  echo "                                Default: origin"
  echo "  -n, --name \"<user.name>\"      \"Your name\" (for git config)."
  echo "  -a, --email <user.email>      Your email address (for git config)."
  echo "  -e, --editor <core.editor>    Your text editor (for git config)."
  echo "                                Default: nano"
  echo "  -s, --ssh                     A new SSH key is generated"
  echo "                                if ~/.ssh/id_ed25519 is not found."
  echo "                                The public key is written to stdout."
  echo "                                Also access to GitHub repositories"
  echo "                                is forced via SSH by always"
  echo "                                replacing HTTPS URLs with SSH ones"
  echo "                                (git config --global)."
  echo "  --nano                        Creates a simple initial ~/.nanorc file"
  echo "                                for nano editor."
  echo "                                The existing file is not overwritten."
  echo
  echo "Arguments:"
  echo "  directory                     The path to a clone of a git repository"
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################

if ! OPTS="$(getopt \
  --longoptions help,url:,branch:,remote:,name:,email:,editor:,ssh,nano\
  --options hu:b:r:n:a:e:s\
  --name "$(basename "$0")"\
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h) usage; exit ;;
    --url|-u) CLONE_URL="$2"; shift 2 ;;
    --branch|-b) BRANCH="$2"; shift 2 ;;
    --remote|-r) REMOTE="$2"; shift 2 ;;
    --name|-n) NAME="$2"; shift 2 ;;
    --email|-a) MAIL="$2"; shift 2 ;;
    --editor|-e) EDIT="$2"; shift 2 ;;
    --ssh|-s) USE_SSH=true; shift ;;
    --nano) USE_NANO=true; shift ;;
    --) shift; break ;;
    *) echo "DEBUG: No implementation for the option $1" ; exit 1 ;;
  esac
done
ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  CLONE_DIR="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  echo "Too many arguments supplied."
  usage
  exit 1
fi

#######################################
# Main Execution
#######################################

# Check out the git repository.
if ! git-checkout "$CLONE_URL" "$BRANCH" "$REMOTE" "$CLONE_DIR"; then
  usage
  exit 1
fi

# Set up development environment based on given options.
if [ $NAME ]; then
  ENV_SETUP_ARGS+=( "\"$NAME\"" )
fi
if [ $EMAIL ]; then
  ENV_SETUP_ARGS+=( "-a $EMAIL" )
fi
if [ $EDIT ]; then
  ENV_SETUP_ARGS+=( "-e $EDIT" )
fi
if $USE_NANO; then
  ENV_SETUP_ARGS+=( "-n" )
fi
if $USE_SSH; then
  ENV_SETUP_ARGS+=( "-s" )
fi
if (( ${#ENV_SETUP_ARGS[@]} )); then
  dev-setup "${ENV_SETUP_ARGS[@]}"
fi
