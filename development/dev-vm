#!/usr/bin/env bash
#
# Create vm-utility development environment inside a new VM instance.
#
# Installs Multipass tool if not already installed.
# Launches a new Multipass instance using mp-launch tool.
# On launched instance, creates a workspace directory
# and clones the vm-utility repository there.
# With --branch option, checkouts a new local branch.
# With --track option, sets a remote-tracking branch.
# Sets up your identity (--name and --email options)
# and configures the default text editor (--editor option) for Git.
# Creates a simple initial configuration file for nano.
# Generates a new SSH key on the instance and prints the public key.
#
set -e

#######################################
# DEFAULT VALUES
#######################################

DIR=$(dirname "$0")
NAME=
MAIL=
EDIT="nano"
BRANCH=
REMOTE=
CPUS="4"
DISK="128G"
MEMORY="16G"
VM_NAME="primary"
BRANCH=
MOUNT=
IP=

#######################################
# USAGE
#######################################

usage() {
  echo "Usage: $0 [options]"
  echo
  echo "Creates and starts a new VM for vm-utility development."
  echo
  echo "Example:"
  echo "$ $0 -n \"Peter Parker\" -a peter.parker@gmail.com -e nano -b web-dev spider-verse"
  echo
  echo "Options:"
  echo "  -h, --help                            Displays help on commandline options"
  echo "  -n, --name \"<user.name>\"              \"Your name\" (for git config)"
  echo "  -a, --email <user.email>              Your email address (for git config)"
  echo "  -e, --editor <core.editor>            Your text editor (for git config)"
  echo "  -b, --branch <branch>                 Name of a local branch to checkout"
  echo "  -t, --track <remote>/<branch>         Name of a remote-tracking branch"
  echo "  -c, --cpus <cpus>                     Numbers of CPUs to allocate."
  echo "                                        Minimum: 1, default: 4."
  echo "  -d, --disk <disk>                     Disk space to allocate. Positive"
  echo "                                        integers, in bytes, or with K, M, G"
  echo "                                        suffix."
  echo "                                        Minimum: 512M, default: 128G."
  echo "  -m, --memory <mem>                    Amount of memory to allocate. Positive"
  echo "                                        integers, in bytes, or with K, M, G"
  echo "                                        suffix"
  echo "                                        Minimum: 128M, default: 16G."
  echo "  -i, --ip <ip>                         Sets a static IP address for the"
  echo "                                        instance. Note that there will be no"
  echo "                                        IP address conflict detection with"
  echo "                                        any existing addresses."
  echo "  --mount <local-path>:<vm-path>        Mount a local directory inside the"
  echo "                                        instance. If <vm-path> is omitted,"
  echo "                                        the mount point will be the same as the"
  echo "                                        absolute path of <local-path>"
  echo "Arguments:"
  echo "  vm-name                               Name for the instance. If it is"
  echo "                                        'primary' (the configured primary"
  echo "                                        instance name), the user's home"
  echo "                                        directory is mounted inside the newly"
  echo "                                        launced instance, in 'Home'."
  echo "                                        Default: primary"
}

#######################################
# EXECUTION
#######################################

#######################################
# Handling command line arguments
#######################################

if ! OPTS="$(getopt \
  --longoptions help,name:,email:,editor:,branch:,track:,cpus:,disk:,\
memory:,ip:,mount: \
  --options hn:a:e:b:t:c:d:m:i: \
  --name "$(basename "$0")" \
  -- "$@"
)"; then
  usage
  exit 1
fi
eval set -- "$OPTS"
while true; do
  case "$1" in
    --help|-h) usage; exit ;;
    --name|-n) NAME="$2"; shift 2 ;;
    --email|-a) MAIL="$2"; shift 2 ;;
    --editor|-e) EDIT="$2"; shift 2 ;;
    --branch|-b) BRANCH="$2"; shift 2 ;;
    --track|-t) REMOTE="$2"; shift 2 ;;
    --cpus|-c) CPUS="$2"; shift 2 ;;
    --disk|-d) DISK="$2"; shift 2 ;;
    --memory|-m) MEMORY="$2"; shift 2 ;;
    --ip|-i) IP="$2"; shift 2 ;;
    --mount) MOUNT="$2"; shift 2 ;;
    --) shift; break ;;
    *) echo "DEBUG: No implementation for the option $1" ; exit 1 ;;
  esac
done
ARGS=("$@")
ARGCOUNT=${#ARGS[@]}
if [ "$ARGCOUNT" -eq "1" ]; then
  VM_NAME="${ARGS[0]}"
elif [ "$ARGCOUNT" -gt "1" ]; then
  ERRORS+=("Too many arguments supplied.")
fi

#######################################
# Main Execution
#######################################

# Install multipass if not installed
# and wait that multipassd is running.
setup-multipass

echo
echo "Creating and launching the $VM_NAME instance.."
LAUNCH=( "mp-launch -k -n $VM_NAME -c $CPUS -m $MEMORY -d $DISK" )
if [ $IP ]; then
  LAUNCH+=("-i $IP")
fi
if [ $MOUNT ];then
  LAUNCH+=("--mount $MOUNT")
fi
${LAUNCH[@]}

echo
echo "Setting up the $VM_NAME for development.."
EXEC_ARGS+=( "$VM_NAME" )
EXEC_ARGS+=( "$NAME" )
EXEC_ARGS+=( "$MAIL" )
EXEC_ARGS+=( "$EDIT" )
EXEC_ARGS+=( "$BRANCH" )
EXEC_ARGS+=( "$REMOTE" )
multipass exec $VM_NAME -- bash -c ' # Following run on the VM

# VM environment
VM_NAME=$0
NAME=$1
MAIL=$2
EDIT=$3
BRANCH=$4
REMOTE=$5
CHECKOUT=( "git checkout" )
GIT_SETUP=( "development/config-git" )
WORKSPACE=~/workspace

mkdir $WORKSPACE
cd $WORKSPACE
echo "The workspace directory created: $WORKSPACE"

echo
echo "Cloning vm-utility to the workspace from GitHub.."
git clone https://github.com/mkaapu/vm-utility.git
cd vm-utility

if [ $BRANCH ] || [ $REMOTE ]; then
  echo
  echo "Setting up a local development branch.."
  if [ $BRANCH ] && [ $REMOTE ]; then
    CHECKOUT+=( "-b $BRANCH $REMOTE" )
  elif [ $REMOTE ]; then
    CHECKOUT+=( "--track $REMOTE" )
  else
    CHECKOUT+=( "-b $BRANCH" )
  fi
  ${CHECKOUT[@]}
fi

echo
echo "Installing vm-utility.."
./setup

echo
echo "Customizing Git environment.."
development/config-nano
if [ $MAIL ]; then
  GIT_SETUP+=( "-a $MAIL" )
fi
if [ $EDIT ]; then
  GIT_SETUP+=( "-e $EDIT" )
fi
GIT_SETUP+=( "\"$NAME\"" )
${GIT_SETUP[@]}

echo
echo "Generating a new SSH key.."
ssh-keygen -q -t ed25519 -f ~/.ssh/id_ed25519 -N ""
echo "Add the newly generated public SSH key on the $VM_NAME:"
cat ~/.ssh/id_ed25519.pub
echo "to:"
echo "https://github.com/settings/keys"
echo "and"
echo "$VM_NAME:$WORKSPACE/vm-utility is ready for development."

' "${EXEC_ARGS[@]}" # Arguments passed for bash on the VM as an array
